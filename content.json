{"meta":{"title":"Do it","subtitle":null,"description":null,"author":"comsubins","url":"http://www.lianzai.me"},"pages":[],"posts":[{"title":"贝塞尔曲线+CAShapeLayer的相关应用","slug":"UIBezierPath+CAShapeLayer","date":"2018-06-21T14:05:38.000Z","updated":"2018-06-28T15:25:00.291Z","comments":true,"path":"2018/06/21/UIBezierPath+CAShapeLayer/","link":"","permalink":"http://www.lianzai.me/2018/06/21/UIBezierPath+CAShapeLayer/","excerpt":"之前碰到过一个优惠劵的不规则图形,既有圆角又有阴影,虽然用QUARZ2D也能做,但是还是想用下贝塞尔+CAShapeLayer的组合.最终效果如下图:","text":"之前碰到过一个优惠劵的不规则图形,既有圆角又有阴影,虽然用QUARZ2D也能做,但是还是想用下贝塞尔+CAShapeLayer的组合.最终效果如下图: 技术相关点: 贝塞尔圆形的绘制 CAShapeLayer相关应用 12345678UIBezierPath *path = [UIBezierPath bezierPath];//左上圆弧[path addArcWithCenter:CGPointMake(4, 4) radius:4 startAngle:DEGREES_TO_RADIANS(270) endAngle:DEGREES_TO_RADIANS(180) clockwise:NO]; 参数如下: center :圆心位置 radius :半径 startAngle : 开始角度 endAngle : 结束角度 clockwise : 是否顺时针 弧线参考系如下: 开始画圆:12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 UIBezierPath *path = [UIBezierPath bezierPath];//左上圆弧[path addArcWithCenter:CGPointMake(4, 4) radius:4 startAngle:DEGREES_TO_RADIANS(270) endAngle:DEGREES_TO_RADIANS(180) clockwise:NO];[path addLineToPoint:CGPointMake(0, 100)];//左半弧[path addArcWithCenter:CGPointMake(0, 100 + 10) radius:10 startAngle:DEGREES_TO_RADIANS(270) endAngle:DEGREES_TO_RADIANS(90) clockwise:YES];[path addLineToPoint:CGPointMake(0, self.bounds.size.height-4)];//左下圆弧[path addArcWithCenter:CGPointMake(4, self.bounds.size.height-4) radius:4 startAngle:DEGREES_TO_RADIANS(180) endAngle:DEGREES_TO_RADIANS(90) clockwise:NO];[path addLineToPoint:CGPointMake(self.bounds.size.width-4, self.bounds.size.height)];//右下圆弧[path addArcWithCenter:CGPointMake(self.bounds.size.width-4, self.bounds.size.height-4) radius:4 startAngle:DEGREES_TO_RADIANS(90) endAngle:DEGREES_TO_RADIANS(0) clockwise:NO];[path addLineToPoint:CGPointMake(self.bounds.size.width, 100+20)];//右半弧[path addArcWithCenter:CGPointMake(self.bounds.size.width, 100+10) radius:10 startAngle:DEGREES_TO_RADIANS(90) endAngle:DEGREES_TO_RADIANS(270) clockwise:YES];[path addLineToPoint:CGPointMake(self.bounds.size.width, 4)];//右上[path addArcWithCenter:CGPointMake(self.bounds.size.width-4, 4) radius:4 startAngle:DEGREES_TO_RADIANS(0) endAngle:DEGREES_TO_RADIANS(270) clockwise:NO];[path closePath]; CAShapeLayer属于QuartzCore框架，继承自CALayer。CAShapeLayer是在坐标系内绘制贝塞尔曲线的，通过绘制贝塞尔曲线，设置shape(形状)的path(路径)，从而绘制各种各样的图形以及不规则图形。因此，使用CAShapeLayer需要与UIBezierPath一起使用. 常用API: 1234567891011self.shapLinelayer.path = path.CGPath;self.shapLinelayer.lineWidth = 1;self.shapLinelayer.strokeColor = [UIColor redColor].CGColor;self.shapLinelayer.fillColor = [UIColor orangeColor].CGColor;self.shapLinelayer.shadowOpacity = 0.8;self.shapLinelayer.shadowColor = [UIColor blackColor].CGColor;self.shapLinelayer.shadowRadius = 4;self.shapLinelayer.shadowOffset = CGSizeMake(0, 0);self.shapLinelayer.shadowPath = path.CGPath;//配置阴影路径self.shapLinelayer.lineJoin = kCALineJoinRound;[self.layer insertSublayer:self.shapLinelayer atIndex:0]; 最后在layoutsubview方法里面调用这些方法就OK了.iOS中画图类还有CoreGraphics，但笔者比较喜欢使用CAShapeLayer，且CAShapeLayer一般是与UIBezierPath连用的，如果有动画功能的话，还可以加上CABasicAnimation. 扩展: 1,贝赛尔曲线除了画圆,还有很多别的函数,https://developer.apple.com/documentation/uikit/uibezierpath?preferredLanguage=occ 2,CAShapeLayer还可以与CADisplayLink,黄金搭档,实现很多复杂的动画.http://www.cocoachina.com/ios/20161202/18252.html","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.lianzai.me/tags/iOS/"}]},{"title":"git提速","slug":"git提速","date":"2017-11-21T11:31:57.000Z","updated":"2018-06-21T11:33:49.000Z","comments":true,"path":"2017/11/21/git提速/","link":"","permalink":"http://www.lianzai.me/2017/11/21/git提速/","excerpt":"笔者今天打开Mac更新一个项目的三方库,奈何速度实在太慢.现把方法总结一下,第一种方法速度最快,可达M级别.","text":"笔者今天打开Mac更新一个项目的三方库,奈何速度实在太慢.现把方法总结一下,第一种方法速度最快,可达M级别. 1.设置git代理 主要是这种方式 其他方式效果没这个明显,首先下载这个软件 mac 版https://github.com/iMeiji/shadowsocks_install/releases/tag/0.13这货不知道是什么请自行百度,把这货打开,选择全局模式,//接下来针对git 对github进行代理配置git config –global http.https://github.com.proxy https://127.0.0.1:1087git config –global https.https://github.com.proxy https://127.0.0.1:1087如图我这边是1087 后边就写1087的端口号//取消的方法也贴一下git config –global –unset http.https://github.com.proxygit config –global –unset https.https://github.com.proxy//不知道自己有没有配成功可以使用命令行看看git config –list 有上面配置的1087地址就是成功了然后 pod update ..pod install –verbose –no-repo-update 什么的.更新三方 速度翻个几十倍应该没问题 2.中转克隆 借助第三方coding.net的 git 导入功能，通过git服务器clone你要下载的项目，再从 coding.net 上面下载下来。教程可以百度一大堆. 3.修改host 老实说这个方法没什么用,也贴上来吧,说不定你们有用呢,http://github.global.ssl.fastly.Net 查找这个域名IP,然后在命令行中输入 sudo vi /etc/hosts 编辑 hosts 文件,不熟悉vim的可以,open . 打开这个文件夹 把host文件拖到桌面改,然后替换.151.101.xxx.xxx global-ssl.fastly.Net192.30.xxx.xxx github.com刷新缓存sudo dscacheutil -flushcachehttps://www.zhihu.com/question/27159393/answer/35528173","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://www.lianzai.me/tags/工具/"},{"name":"日常","slug":"日常","permalink":"http://www.lianzai.me/tags/日常/"}]},{"title":"ARKit 之利用Unity模型虚拟女朋友","slug":"ARKit-之利用Unity模型虚拟女朋友","date":"2017-10-21T11:35:23.000Z","updated":"2018-06-21T11:45:57.000Z","comments":true,"path":"2017/10/21/ARKit-之利用Unity模型虚拟女朋友/","link":"","permalink":"http://www.lianzai.me/2017/10/21/ARKit-之利用Unity模型虚拟女朋友/","excerpt":"用unity随便玩了一下.","text":"用unity随便玩了一下.展示效果 1.准备工作 unity 和模型包 unity软件可以从官网下载,请自行百度安装. 模型包可以从日本Unity来下载 http://unity-chan.com/download/index.php 注:这里模型包有直接打包成unity包的也有zip格式的 我用的是zip包 2.正式开始 1.打开unity 选择assets store资源商店下载 搜索arkit 选择unity arkit plugin 下载然后点击01图中的导入按钮 2,双击刚下载的模型包,unity自动导入,然后双击unityARKitScene,确保当前项目打开的场景是这个 3,删除图中红圈2个,这个我们不需要用到 4,导入图中所示的2个文件夹 拖到Assets中 5,选择prefabs 文件夹中的candyRock 将其拖到场景中 6,调整坐标 7,如图所示8,场景中右键创建一个gameobject,右边添加脚本 如下图所示 点击右边小齿轮可以选择相对应的音乐文件 9,点击编译运行即可 (需要真机 iOS11 )","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.lianzai.me/tags/iOS/"},{"name":"unity","slug":"unity","permalink":"http://www.lianzai.me/tags/unity/"}]},{"title":"ARKit初识","slug":"ARKit","date":"2017-08-07T11:19:21.000Z","updated":"2018-06-21T11:29:39.000Z","comments":true,"path":"2017/08/07/ARKit/","link":"","permalink":"http://www.lianzai.me/2017/08/07/ARKit/","excerpt":"什么是ARKit?ARKit是苹果在2017年WWDC推出的AR开发平台。开发人员可以使用这套工具iPhone和iPad创建增强现实应用程序。刚好自己的手机支持于是乎看着文档来玩一玩吧.","text":"什么是ARKit?ARKit是苹果在2017年WWDC推出的AR开发平台。开发人员可以使用这套工具iPhone和iPad创建增强现实应用程序。刚好自己的手机支持于是乎看着文档来玩一玩吧. 1.追踪 world tracking 全局追踪识别现实场景要显示的东西应该放在哪里 . Visual inertial odometry 视觉惯性测距就像平常我们看东西一样.近大远小. No external setup 没有外部设置苹果的意思就是说有一台iPhone就够了,不需要其他外设##2.场景理解 Plane detection 平面检测对现实平面是否水平面,斜面,垂直面进行检测 Hit-testig 命中测试当确定这个平面的时候,给虚拟物体加上重力计数,它会平放在那里 Light estimation 光估量摄像头传感器评估现场的光度,给你的虚拟物品加上阴影之类的##3.渲染 Easy integration 简单集合 AR views AR视图 Custom rendering 自定义渲染 简单来说 ARKit 就是利用相机捕捉现实世界然后在屏幕上显示3D模型. 相机捕捉现实世界 —-&gt;ARkit来实现 显示自己的3D模型 —-&gt;SceneKit #底层体系 ScenneKit iOS8后出来用来做游戏用的3D SpriteKit iOS7把2D coco 再进行封装 Metal 操作GPU CPU的API 进行纹理,材质上的改变 AVFoudation 数据采集捕捉 CoreMotion 侦测手机移动,3d画面以怎样的角度显示等等#整个步骤 First step ARSession //这是个单例,是ARKit的核心类,用于控制设备摄像头处理传感器数据,对捕捉的图像进行分析等等 Configurations ARSessionConfiguration //跟踪设备方向的一个基本配置,在运行时候需要指定AR运行的配置 class ARWorldTrackingSessionConfiguration //配置跟踪设备的方向和位置,以及检测设备摄像头所看到的现实世界的表面 Standard Views ARSCNView //用来增加相机通过3D Scenekit所捕捉到的内容并展示AR效果的一个View ARSKView //用来增强相机通过2D SpriteKit所捕捉到的内容并展示AR效果的一个View Real-World Objects and Positions ARAnchor //真实世界的位置和方向,用于在一个AR场景中放置物体 APPlaneAnchor //在一个AR Session会话中检测一个真实世界的位置和方向的相关信息 ARHitTestResult //在一个AR Session会话中通过检测相机视图中的一个点来获取真是世界中表面的相关信息 Camera and Scene Details ARFrame //捕获一个视频图像和位置追踪信息作为一个AR会话的一部分 ARCamera //在一个AR会话中摄像机的位置和成像特征信息为捕获视频帧 ARLightEstimate //在一个AR会话中估计场景照明信息关联到一个捕获的视频帧 #Demo练习one添加一个白色的球体到屏幕中 123456789101112131415161718192021222324252627282930 //初始化配置override func viewDidLoad() &#123; super.viewDidLoad() //设置追踪 let configuration = ARWorldTrackingSessionConfiguration(); //检测水平面 configuration.planeDetection = .horizontal; //开始配置运行 sceneView.session.run(configuration); // Do any additional setup after loading the view, typically from a nib.&#125;func addCube(_ sender: Any) &#123; //镜头前后的位置 let zCoords = -0.5; print(zCoords); //单位米 0.1米 let culbeNode = SCNNode(geometry:SCNBox(width: 0.1, height: 0.1, length: 0.1, chamferRadius: 0.1) ); //出现在3维空间的位置 culbeNode.position = SCNVector3(0,0,zCoords); //添加到根节点 sceneView.scene.rootNode.addChildNode(culbeNode);&#125; #Demo2添加3D素材到屏幕上,这里用到的素材取自苹果的Demo,后面会给出的Demo链接和苹果的官方Demo链接12345678910111213141516171819202122232425262728293031323334353637383940414243444546 //获取相机的坐标struct myCamraCoordinaties &#123; var x = Float(); var y = Float(); var z = Float(); &#125;func getCamraCoordinaties(sceneViewm: ARSCNView) -&gt; myCamraCoordinaties &#123; let cameraTransForm = sceneView.session.currentFrame?.camera.transform; let cameraCoodrdiantes = MDLTransform(matrix: cameraTransForm!) var cc = myCamraCoordinaties() cc.x = cameraCoodrdiantes.translation.x cc.y = cameraCoodrdiantes.translation.y cc.z = cameraCoodrdiantes.translation.z return cc; &#125;func addCup(_ sender: Any) &#123; let cupNode = SCNNode(); let cc = getCamraCoordinaties(sceneViewm: sceneView); cupNode.position = SCNVector3(cc.x,cc.y,cc.z); guard let vitualObjectSecne = SCNScene(named:\"cup.scn\" ,inDirectory:\"Models.scnassets/cup\")else&#123; return &#125; let wrapperNode = SCNNode() for child in vitualObjectSecne.rootNode.childNodes &#123; child.geometry?.firstMaterial?.lightingModel = .physicallyBased wrapperNode.addChildNode(child) &#125; cupNode.addChildNode(wrapperNode); sceneView.scene.rootNode.addChildNode(cupNode); &#125; 下载地址[^官方Demo] https://developer.apple.com/sample-code/wwdc/2017/PlacingObjects.zip[^文中Demo] https://github.com/FineaX/arkitDemoPractice","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.lianzai.me/tags/iOS/"}]}]}